package main

import (
	"fmt"
)

/*
1. 变量声明:

	变量声明声明后才能使用, 同一作用域内, 变量名不能重复声明, 但可以多次赋值,
	格式:
		var 变量名 变量类型
		变量名 := 表达式
		变量名 := 值

	批量声明:
		每个变量声明就需要写 var 关键字会比较麻烦, 所以可以批量声明, 一次性可以声明多个变量,语法如下:
		var (
			a string
			b int
			c bool
			d float32
		)


	变量的初始化:
		在声明变量的时候会自动对应的内存区域进行初始化操作, 每个变量会被初始化其他类型的默认值:
			1. 整数和浮点数默认为 0
			2. 字符串默认为空字符串
			3. 布尔类型默认为 false
			4. 切片 函数 指针默认为nil

		声明:
			var 变量名 类型 = 表达式

		例子:
			var a int = 10
		短变量声明:
			a:=10

		注意:
			1. 段变量只能在函数内部使用, 不能在函数外部使用,

匿名变量:
		在使用多重赋值时, 如果想要忽略某个值, 可以使用 匿名变量, 匿名变量用一个下划线表示:
			_, b := 10, 20

		匿名变量不会占用命名空间,不会分配内存, 所以匿名变量之间不存在重复声明,

		注意事项:
			1. 函数外的的每个语句都必须以关键字开始(var func const 等)
			2. 短声明 := 不能用在函数外部,
			3. _ 多用于占位, 表示忽略值

常量:
		永远不会变的值, 多用于定义程序运行期间不会改变的那些值, 常量的生命和变量的生命非常相似, 只是把 var 换成了 const ,常量在定义的时候必须赋值,
		const a = 1.1
		const b = 2.2

		多个常量可以一起声明
		const (
			a = 1.1
			b = 2.2
		)
		const 在声明多个常量时, 如果省略了值表示和上面一行的值相同,
		const (
			n1 = 30
		)

iota:
		into  是 go 语言的常量计数器,只能在常量的表达式中使用, iota 在 const 关键字出现时将重置为 0 , const 每新增一行 就加 1  iota 在定义枚举很有用


*/

func foo() (int, string) {
	return 10, "aabbcc"
}

// 声明一个全部变量
var globl int = 10

func main() {
	globl := 20

	fmt.Println(globl)
	// 匿名变量
	x, _ := foo()
	fmt.Println(x)

	// 常量
	const (
		a = 1.1
		b
		c
		d
	)
	fmt.Println(a, b, c, d)

	// iota
	const (
		n1 = iota
		n2
		n3
		n4
		n5
		n6
	)

	fmt.Println(n1, n2, n3, n4, n5, n6)

}
